# Nombre de la aplicación
spring.application.name=demo
server.port=8000



# Configuración de la base de datos
spring.datasource.url=jdbc:postgresql://localhost:5432/mydatabase
spring.datasource.username=myuser
spring.datasource.password=102025
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuración de Hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# JWT Secret Key
jwt.secret=3Ra2mSl3UVw6zfpBOYo3H0uk7d2ghoKrHshirEVibJs=

# Redirección autorizada para Google OAuth2
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8000/login/oauth2/code/google

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=YOUR_GOOGLE_CLIENT_ID
spring.security.oauth2.client.registration.google.client-secret=YOUR_GOOGLE_CLIENT_SECRET
spring.security.oauth2.client.registration.google.scope=email,profile

# Configuración de correo electrónico
spring.mail.host=smtp.example.com
spring.mail.port=587
spring.mail.username=your-email@example.com
spring.mail.password=your-password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# URL del frontend para las redirecciones de OAuth2
frontend.url=http://localhost:3000



## Configuración de la cookie de sesión para que funcione con redirecciones OAuth2
## Le decimos al navegador que está bien enviar esta cookie en un contexto de redirección entre sitios.
#server.servlet.session.cookie.same-site=None

## NOTA IMPORTANTE: En un entorno de producción con HTTPS, también necesitarías la siguiente línea:
## server.servlet.session.cookie.secure=true
